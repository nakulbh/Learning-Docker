Hypervisor ---> virtualisation (virtual isolation) 
...............................................................
to make a vm we need a virtualisation platform and to create a container we also need a contanalisarion platform

most organisation use vm/EC2 instance and on top of them they use Docker 

containers are ligthweight in nature,
they dont have a complete os,
they share resourses from the host os,
they have a base image of a os or you can say a package which is combiantion of your app + lib + system dependicies,
they are easy to ship as their copy is low in size,
if you want to copy a vm you make a snapshot of it which is 1-2 gb and in containers it is just in mb's

vm have a complete os and hardware and everthing is seprate
.................................................................................................................................


command -> container -> Docker file -> submit this to docker engine -> this file is converted into a image -> now again with some commands we can convert this image into container

Docker is dependent on docker engine and if Docker engine is down then all your container are also down

container have a base Os or minimum system dependicies and this system dependicies are required to form a logical isolation 
..........................................................................................................................................

files and folders in containers base image 

    /bin: contains binary executable files, such as the ls, cp, and ps commands.

    /sbin: contains system binary executable files, such as the init and shutdown commands.

    /etc: contains configuration files for various system services.

    /lib: contains library files that are used by the binary executables.

    /usr: contains user-related files and utilities, such as applications, libraries, and documentation.

    /var: contains variable data, such as log files, spool files, and temporary files.

    /root: is the home directory of the root user.

These basic folders foam a logical isolation one container to another container
these files are the part of a container base image
....................................................................................................................................................

Files and folders that container use from host operating System

    The host's file system: Docker containers can access the host file system using bind mounts, which allow the container to read and write files in the host file system.

    Networking stack: The host's networking stack is used to provide network connectivity to the container. Docker containers can be connected to the host's network directly or through a virtual network.

    System calls: The host's kernel handles system calls from the container, which is how the container accesses the host's resources, such as CPU, memory, and I/O.

    Namespaces: Docker containers use Linux namespaces to create isolated environments for the container's processes. Namespaces provide isolation for resources such as the file system, process ID, and network.

    Control groups (cgroups): Docker containers use cgroups to limit and control the amount of resources, such as CPU, memory, and I/O, that a container can access.
    